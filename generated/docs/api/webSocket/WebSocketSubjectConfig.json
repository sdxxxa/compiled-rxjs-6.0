{
  "id": "api/webSocket/WebSocketSubjectConfig",
  "title": "WebSocketSubjectConfig",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/dom/WebSocketSubject.ts?message=docs(webSocket)%3A%20describe%20your%20change...#L8-L138\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/dom/WebSocketSubject.ts#L8-L138\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/webSocket\", \"name\": \"rxjs/webSocket\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/webSocket/WebSocketSubjectConfig\", \"name\": \"WebSocketSubjectConfig\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/webSocket\">rxjs/webSocket</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>WebSocketSubjectConfig</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>WebSocketSubjectConfig is a plain Object that allows us to make our\nwebSocket configurable.</p>\n<p></p>\n  \n  \n  <section class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface WebSocketSubjectConfig&#x3C;T> {\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#url\">url: string</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#protocol\">protocol?: string | Array&#x3C;string></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#resultSelector\">resultSelector?: (e: MessageEvent) => T</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#serializer\">serializer?: (value: T) => WebSocketMessage</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#deserializer\">deserializer?: (e: MessageEvent) => T</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#openObserver\">openObserver?: NextObserver&#x3C;Event></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#closeObserver\">closeObserver?: NextObserver&#x3C;CloseEvent></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#closingObserver\">closingObserver?: NextObserver&#x3C;void></a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#WebSocketCtor\">WebSocketCtor?: {...}</a>\n  <a class=\"code-anchor\" href=\"api/webSocket/WebSocketSubjectConfig#binaryType\">binaryType?: 'blob' | 'arraybuffer'</a>\n}\n</code-example>\n\n  \n  \n\n\n  \n  \n\n</section>\n  \n  \n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Provides flexibility to <a href=\"api/webSocket/webSocket\"><code>webSocket</code></a></span></p>\n<p>It defines a set of properties to provide custom behavior in specific\nmoments of the socket's lifecycle. When the connection opens we can\nuse <code>openObserver</code>, when the connection is closed <code>closeObserver</code>, if we\nare interested in listening for data comming from server: <code>deserializer</code>,\nwhich allows us to customize the deserialization strategy of data before passing it\nto the socket client. By default <code>deserializer</code> is going to apply <code>JSON.parse</code> to each message comming\nfrom the Server.</p>\n<h2>Example</h2>\n<p><strong>deserializer</strong>, the default for this property is <code>JSON.parse</code> but since there are just two options\nfor incomming data, either be text or binarydata. We can apply a custom deserialization strategy\nor just simply skip the default behaviour.</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n    url: 'ws://localhost:8081',\n//Apply any transformation of your choice.\n    deserializer: ({data}) => data\n});\n\nwsSubject.subscribe(console.log);\n\n// Let's suppose we have this on the Server: ws.send(\"This is a msg from the server\")\n//output\n//\n// This is a msg from the server\n</code-example>\n<p><strong>serializer</strong> allows us tom apply custom serialization strategy but for the outgoing messages</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n    url: 'ws://localhost:8081',\n//Apply any transformation of your choice.\n    serializer: msg => JSON.stringify({channel: \"webDevelopment\", msg: msg})\n});\n\nwsSubject.subscribe(() => subject.next(\"msg to the server\"));\n\n// Let's suppose we have this on the Server: ws.send(\"This is a msg from the server\")\n//output\n//\n// {\"channel\":\"webDevelopment\",\"msg\":\"msg to the server\"}\n</code-example>\n<p><strong>closeObserver</strong> allows us to set a custom error when an error raise up.</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n    url: 'ws://localhost:8081',\n    closeObserver: {\n        next(closeEvent) {\n            const customError = { code: 6666, reason: \"Custom evil reason\" }\n            console.log(`code: ${customError.code}, reason: ${customError.reason}`);\n        }\n    }\n});\n\n//output\n// code: 6666, reason: Custom evil reason\n</code-example>\n<p><strong>openObserver</strong>, Let's say we need to make some kind of init task before sending/receiving msgs to the\nwebSocket or sending notification that the connection was successful, this is when\nopenObserver is usefull for.</p>\n<code-example language=\"ts\">\nimport { webSocket } from 'rxjs/webSocket';\n\nconst wsSubject = webSocket({\n    url: 'ws://localhost:8081',\n    openObserver: {\n        next: () => {\n            console.log('connetion ok');\n        }\n    },\n});\n\n//output\n// connetion ok`\n</code-example>\n\n</section>\n\n  \n<section class=\"instance-properties\">\n  <h2>Properties</h2>\n  <table class=\"is-full-width list-table properties-table\">\n    <thead>\n      <tr><th>Property</th><th>Type</th><th>Description</th></tr>\n    </thead>\n    <tbody>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"url\"></a>url</td>\n        <td><label class=\"property-type-label\"><code>string</code></label></td>\n        <td>\n          <p>The url of the socket server to connect to</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"protocol\"></a>protocol</td>\n        <td><label class=\"property-type-label\"><code>string | Array&#x3C;string></code></label></td>\n        <td>\n          <p>The protocol to use to connect</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"resultSelector\"></a>resultSelector</td>\n        <td><label class=\"property-type-label\"><code>(e: MessageEvent) => T</code></label></td>\n        <td>\n          \n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"serializer\"></a>serializer</td>\n        <td><label class=\"property-type-label\"><code>(value: T) => WebSocketMessage</code></label></td>\n        <td>\n          <p>A serializer used to create messages from passed values before the\nmessages are sent to the server. Defaults to JSON.stringify.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"deserializer\"></a>deserializer</td>\n        <td><label class=\"property-type-label\"><code>(e: MessageEvent) => T</code></label></td>\n        <td>\n          <p>A deserializer used for messages arriving on the socket from the\nserver. Defaults to JSON.parse.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"openObserver\"></a>openObserver</td>\n        <td><label class=\"property-type-label\"><code>NextObserver&#x3C;Event></code></label></td>\n        <td>\n          <p>An Observer that watches when open events occur on the underlying web socket.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"closeObserver\"></a>closeObserver</td>\n        <td><label class=\"property-type-label\"><code>NextObserver&#x3C;CloseEvent></code></label></td>\n        <td>\n          <p>An Observer than watches when close events occur on the underlying webSocket</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"closingObserver\"></a>closingObserver</td>\n        <td><label class=\"property-type-label\"><code>NextObserver&#x3C;void></code></label></td>\n        <td>\n          <p>An Observer that watches when a close is about to occur due to\nunsubscription.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"WebSocketCtor\"></a>WebSocketCtor</td>\n        <td><label class=\"property-type-label\"><code>{\n    new (url: string, protocols?: string | string[]): WebSocket;\n}</code></label></td>\n        <td>\n          <p>A WebSocket constructor to use. This is useful for situations like using a\nWebSocket impl in Node (WebSocket is a DOM API), or for mocking a WebSocket\nfor testing purposes</p>\n\n          \n          \n        </td>\n    </tr>\n    \n      <tr class=\"instance-property\">\n        <td><a id=\"binaryType\"></a>binaryType</td>\n        <td><label class=\"property-type-label\"><code>'blob' | 'arraybuffer'</code></label></td>\n        <td>\n          <p>Sets the <code>binaryType</code> property of the underlying WebSocket.</p>\n\n          \n          \n        </td>\n    </tr>\n    \n    </tbody>\n  </table>\n</section>\n  \n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/webSocket\n - api/webSocket/webSocket\n-->\n<!-- links from this doc:\n - /api\n - api/webSocket\n - api/webSocket/WebSocketSubjectConfig#WebSocketCtor\n - api/webSocket/WebSocketSubjectConfig#binaryType\n - api/webSocket/WebSocketSubjectConfig#closeObserver\n - api/webSocket/WebSocketSubjectConfig#closingObserver\n - api/webSocket/WebSocketSubjectConfig#deserializer\n - api/webSocket/WebSocketSubjectConfig#openObserver\n - api/webSocket/WebSocketSubjectConfig#protocol\n - api/webSocket/WebSocketSubjectConfig#resultSelector\n - api/webSocket/WebSocketSubjectConfig#serializer\n - api/webSocket/WebSocketSubjectConfig#url\n - api/webSocket/webSocket\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/dom/WebSocketSubject.ts?message=docs(webSocket)%3A%20describe%20your%20change...#L8-L138\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/dom/WebSocketSubject.ts#L8-L138\n-->"
}