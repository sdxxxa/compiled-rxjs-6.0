{
  "id": "api/operators/expand",
  "title": "expand",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/expand.ts?message=docs(operators)%3A%20describe%20your%20change...#L13-L73\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/expand.ts#L13-L73\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/expand\", \"name\": \"expand\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>expand</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Recursively projects each source value to an Observable which is merged in\nthe output Observable.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> expand&#x3C;T, R>(project: (value: T, index: number) => ObservableInput&#x3C;R>, concurrent: number = Number.POSITIVE_INFINITY, scheduler: SchedulerLike = undefined): OperatorFunction&#x3C;T, R></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>project</td>\n      \n      <td class=\"param-description\">\n      <p>        A function\nthat, when applied to an item emitted by the source or the output Observable,\nreturns an Observable.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>concurrent</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>Number.POSITIVE_INFINITY</code>.</p>\n<p>        Maximum number of input\nObservables being subscribed to concurrently.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>undefined</code>.</p>\n<p>        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to use for subscribing to\neach projected inner Observable.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>OperatorFunction&#x3C;T, R></code>: An Observable that emits the source values and also\nresult of applying the projection function to each value emitted on the\noutput Observable and and merging the results of the Observables obtained\nfrom this transformation.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">It's similar to <a href=\"api/operators/mergeMap\"><code>mergeMap</code></a>, but applies the\nprojection function to every source value as well as every output value.\nIt's recursive.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/expand.png\" width=\"100%\" alt=\"expand marble diagram\"></p>\n<p>Returns an Observable that emits items based on applying a function that you\nsupply to each item emitted by the source Observable, where that function\nreturns an Observable, and then merging those resulting Observables and\nemitting the results of this merger. <em>Expand</em> will re-emit on the output\nObservable every source value. Then, each output value is given to the\n<code>project</code> function which returns an inner Observable to be merged on the\noutput Observable. Those output values resulting from the projection are also\ngiven to the <code>project</code> function to produce new output values. This is how\n<em>expand</em> behaves recursively.</p>\n<h2>Example</h2>\n<p>Start emitting the powers of two on every click, at most 10 of them</p>\n<code-example language=\"ts\">\nimport { fromEvent, of } from 'rxjs';\nimport { expand, mapTo, delay, take } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst powersOfTwo = clicks.pipe(\n  mapTo(1),\n  expand(x => of(2 * x).pipe(delay(1000))),\n  take(10),\n);\npowersOfTwo.subscribe(x => console.log(x));\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/operators/mergeMap\"><code>mergeMap</code></a>\n</li>\n    <li><a href=\"api/operators/mergeScan\"><code>mergeScan</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/reduce\n - api/operators/scan\n-->\n<!-- links from this doc:\n - /api\n - api/index/interface/SchedulerLike\n - api/operators\n - api/operators/mergeMap\n - api/operators/mergeScan\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/expand.ts?message=docs(operators)%3A%20describe%20your%20change...#L13-L73\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/expand.ts#L13-L73\n-->"
}