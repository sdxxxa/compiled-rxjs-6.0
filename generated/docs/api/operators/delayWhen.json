{
  "id": "api/operators/delayWhen",
  "title": "delayWhen",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L77\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/delayWhen.ts#L14-L77\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/delayWhen\", \"name\": \"delayWhen\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>delayWhen</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Delays the emission of items from the source Observable by a given time span\ndetermined by the emissions of another Observable.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> delayWhen&#x3C;T>(delayDurationSelector: (value: T, index: number) => Observable&#x3C;any>, subscriptionDelay?: Observable&#x3C;any>): MonoTypeOperatorFunction&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>delayDurationSelector</td>\n      \n      <td class=\"param-description\">\n      <p>        A function that\nreturns an Observable for each value emitted by the source Observable, which\nis then used to delay the emission of that item on the output Observable\nuntil the Observable returned from this function emits a value.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>subscriptionDelay</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>undefined</code>.</p>\n<p>        An Observable that triggers the\nsubscription to the source Observable once it emits any value.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>MonoTypeOperatorFunction&#x3C;T></code>: An Observable that delays the emissions of the source\nObservable by an amount of time specified by the Observable returned by\n<code>delayDurationSelector</code>.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">It's like <a href=\"api/operators/delay\"><code>delay</code></a>, but the time span of the\ndelay duration is determined by a second Observable.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/delayWhen.png\" width=\"100%\" alt=\"delayWhen marble diagram\"></p>\n<p><code>delayWhen</code> time shifts each emitted value from the source Observable by a\ntime span determined by another Observable. When the source emits a value,\nthe <code>delayDurationSelector</code> function is called with the source value as\nargument, and should return an Observable, called the \"duration\" Observable.\nThe source value is emitted on the output Observable only when the duration\nObservable emits a value or completes.\nThe completion of the notifier triggering the emission of the source value\nis deprecated behavior and will be removed in future versions.</p>\n<p>Optionally, <code>delayWhen</code> takes a second argument, <code>subscriptionDelay</code>, which\nis an Observable. When <code>subscriptionDelay</code> emits its first value or\ncompletes, the source Observable is subscribed to and starts behaving like\ndescribed in the previous paragraph. If <code>subscriptionDelay</code> is not provided,\n<code>delayWhen</code> will subscribe to the source Observable as soon as the output\nObservable is subscribed.</p>\n<h2>Example</h2>\n<p>Delay each click by a random amount of time, between 0 and 5 seconds</p>\n<code-example language=\"ts\">\nimport { fromEvent, interval } from 'rxjs';\nimport { delayWhen } from 'rxjs/operators';\n\nconst clicks = fromEvent(document, 'click');\nconst delayedClicks = clicks.pipe(\n  delayWhen(event => interval(Math.random() * 5000)),\n);\ndelayedClicks.subscribe(x => console.log(x));\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/operators/debounce\"><code>debounce</code></a>\n</li>\n    <li><a href=\"api/operators/delay\"><code>delay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/audit\n - api/operators/debounce\n - api/operators/delay\n - api/operators/throttle\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - api/operators/debounce\n - api/operators/delay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/delayWhen.ts?message=docs(operators)%3A%20describe%20your%20change...#L14-L77\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/delayWhen.ts#L14-L77\n-->"
}