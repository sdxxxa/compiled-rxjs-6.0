{
  "id": "api/operators/timeout",
  "title": "timeout",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/timeout.ts?message=docs(operators)%3A%20describe%20your%20change...#L10-L92\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/timeout.ts#L10-L92\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/timeout\", \"name\": \"timeout\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>timeout</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Errors if Observable does not emit a value in given time span.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> timeout&#x3C;T>(due: number | Date, scheduler: SchedulerLike = async): MonoTypeOperatorFunction&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>due</td>\n      \n      <td class=\"param-description\">\n              <p>Number specifying period within which Observable must emit values\n        or Date specifying before when Observable should complete</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>async</code>.</p>\n        <p>Scheduler controlling when timeout checks occur.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>MonoTypeOperatorFunction&#x3C;T></code>: Observable that mirrors behaviour of source, unless timeout checks fail.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/timeout.png\" width=\"100%\" alt=\"timeout marble diagram\"></p>\n<p><code>timeout</code> operator accepts as an argument either a number or a Date.</p>\n<p>If number was provided, it returns an Observable that behaves like a source\nObservable, unless there is a period of time where there is no value emitted.\nSo if you provide <code>100</code> as argument and first value comes after 50ms from\nthe moment of subscription, this value will be simply re-emitted by the resulting\nObservable. If however after that 100ms passes without a second value being emitted,\nstream will end with an error and source Observable will be unsubscribed.\nThese checks are performed throughout whole lifecycle of Observable - from the moment\nit was subscribed to, until it completes or errors itself. Thus every value must be\nemitted within specified period since previous value.</p>\n<p>If provided argument was Date, returned Observable behaves differently. It throws\nif Observable did not complete before provided Date. This means that periods between\nemission of particular values do not matter in this case. If Observable did not complete\nbefore provided Date, source Observable will be unsubscribed. Other than that, resulting\nstream behaves just as source Observable.</p>\n<p><code>timeout</code> accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\nwhen returned Observable will check if source stream emitted value or completed.</p>\n<h2>Examples</h2>\n<p>Check if ticks are emitted within certain timespan</p>\n<code-example language=\"ts\">\nimport { interval } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\nconst seconds = interval(1000);\n\nseconds.pipe(timeout(1100))      // Let's use bigger timespan to be safe,\n                                 // since `interval` might fire a bit later then scheduled.\n.subscribe(\n    value => console.log(value), // Will emit numbers just as regular `interval` would.\n    err => console.log(err),     // Will never be called.\n);\n\nseconds.pipe(timeout(900))\n.subscribe(\n    value => console.log(value), // Will never be called.\n    err => console.log(err),     // Will emit error before even first value is emitted,\n                                 // since it did not arrive within 900ms period.\n);\n</code-example>\n<p>Use Date to check if Observable completed</p>\n<code-example language=\"ts\">\nimport { interval } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\nconst seconds = interval(1000);\n\nseconds.pipe(\n  timeout(new Date(\"December 17, 2020 03:24:00\")),\n)\n.subscribe(\n    value => console.log(value), // Will emit values as regular `interval` would\n                                 // until December 17, 2020 at 03:24:00.\n    err => console.log(err)      // On December 17, 2020 at 03:24:00 it will emit an error,\n                                 // since Observable did not complete by then.\n);\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/operators/timeoutWith\"><code>timeoutWith</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index/interface/TimeoutError\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - api/operators/timeoutWith\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/timeout.ts?message=docs(operators)%3A%20describe%20your%20change...#L10-L92\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/timeout.ts#L10-L92\n-->"
}