{
  "id": "api/operators/catchError",
  "title": "catchError",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/catchError.ts?message=docs(operators)%3A%20describe%20your%20change...#L12-L98\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/catchError.ts#L12-L98\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/catchError\", \"name\": \"catchError\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>catchError</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Catches errors on the observable to be handled by returning a new observable or throwing an error.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> catchError&#x3C;T, O extends ObservableInput&#x3C;any>>(selector: (err: any, caught: Observable&#x3C;T>) => O): OperatorFunction&#x3C;T, T | ObservedValueOf&#x3C;O>></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>selector</td>\n      \n      <td class=\"param-description\">\n       <p>       a function that takes as arguments <code>err</code>, which is the error, and <code>caught</code>, which\n is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n is returned by the <code>selector</code> will be used to continue the observable chain.</p>\n \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n <p><code>OperatorFunction&#x3C;T, T | ObservedValueOf&#x3C;O>></code>: An observable that originates from either the source or the observable returned by the\n catch <code>selector</code> function.</p>\n \n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><img src=\"/assets/images/marble-diagrams/catch.png\" width=\"100%\" alt=\"catch marble diagram\"></p>\n<h2>Examples</h2>\n<p>Continues with a different Observable when there's an error</p>\n<code-example language=\"ts\">\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5).pipe(\n    map(n => {\n  \t   if (n === 4) {\n\t       throw 'four!';\n      }\n     return n;\n    }),\n    catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n  )\n  .subscribe(x => console.log(x));\n  // 1, 2, 3, I, II, III, IV, V\n</code-example>\n<p>Retries the caught source Observable again in case of error, similar to retry() operator</p>\n<code-example language=\"ts\">\nimport { of } from 'rxjs';\nimport { map, catchError, take } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5).pipe(\n    map(n => {\n  \t   if (n === 4) {\n  \t     throw 'four!';\n      }\n\t     return n;\n    }),\n    catchError((err, caught) => caught),\n    take(30),\n  )\n  .subscribe(x => console.log(x));\n  // 1, 2, 3, 1, 2, 3, ...\n</code-example>\n<p>Throws a new error when the source Observable throws an error</p>\n<code-example language=\"ts\">\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nof(1, 2, 3, 4, 5).pipe(\n    map(n => {\n      if (n === 4) {\n        throw 'four!';\n      }\n      return n;\n    }),\n    catchError(err => {\n      throw 'error in source. Details: ' + err;\n    }),\n  )\n  .subscribe(\n    x => console.log(x),\n    err => console.log(err)\n  );\n  // 1, 2, 3, error in source. Details: four!\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index/function/onErrorResumeNext\n - api/operators\n - api/operators/onErrorResumeNext\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/catchError.ts?message=docs(operators)%3A%20describe%20your%20change...#L12-L98\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/catchError.ts#L12-L98\n-->"
}