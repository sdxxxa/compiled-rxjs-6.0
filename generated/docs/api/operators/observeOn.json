{
  "id": "api/operators/observeOn",
  "title": "observeOn",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/observeOn.ts?message=docs(operators)%3A%20describe%20your%20change...#L7-L64\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/observeOn.ts#L7-L64\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/observeOn\", \"name\": \"observeOn\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>observeOn</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Re-emits all notifications from source Observable with specified scheduler.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> observeOn&#x3C;T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>Scheduler that will be used to reschedule notifications from source Observable.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>delay</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>0</code>.</p>\n        <p>Number of milliseconds that states with what delay every notification should be rescheduled.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>MonoTypeOperatorFunction&#x3C;T></code>: Observable that emits the same notifications as the source Observable,\nbut with provided scheduler.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span></p>\n<p><code>observeOn</code> is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\nnotifications emitted by the source Observable. It might be useful, if you do not have control over\ninternal scheduler of a given Observable, but want to control when its values are emitted nevertheless.</p>\n<p>Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\nbut rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\nscheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\nnotification, it will be immediately scheduled again - this time with scheduler passed to <code>observeOn</code>.\nAn anti-pattern would be calling <code>observeOn</code> on Observable that emits lots of values synchronously, to split\nthat emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\nObservable directly (usually into the operator that creates it). <code>observeOn</code> simply delays notifications a\nlittle bit more, to ensure that they are emitted at expected moments.</p>\n<p>As a matter of fact, <code>observeOn</code> accepts second parameter, which specifies in milliseconds with what delay notifications\nwill be emitted. The main difference between <a href=\"api/operators/delay\"><code>delay</code></a> operator and <code>observeOn</code> is that <code>observeOn</code>\nwill delay all notifications - including error notifications - while <code>delay</code> will pass through error\nfrom source Observable immediately when it is emitted. In general it is highly recommended to use <code>delay</code> operator\nfor any kind of delaying of values in the stream, while using <code>observeOn</code> to specify which scheduler should be used\nfor notification emissions in general.</p>\n<h2>Example</h2>\n<p>Ensure values in subscribe are called just before browser repaint.</p>\n<code-example language=\"ts\">\nimport { interval } from 'rxjs';\nimport { observeOn } from 'rxjs/operators';\n\nconst intervals = interval(10);                // Intervals are scheduled\n                                               // with async scheduler by default...\nintervals.pipe(\n  observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n)                                              // scheduler to ensure smooth animation.\n.subscribe(val => {\n  someDiv.style.height = val + 'px';\n});\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/operators/delay\"><code>delay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index/class/Notification\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - api/operators/delay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/observeOn.ts?message=docs(operators)%3A%20describe%20your%20change...#L7-L64\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/observeOn.ts#L7-L64\n-->"
}