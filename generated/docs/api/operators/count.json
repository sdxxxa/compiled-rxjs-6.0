{
  "id": "api/operators/count",
  "title": "count",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/count.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L67\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/count.ts#L5-L67\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/count\", \"name\": \"count\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>count</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Counts the number of emissions on the source and emits that number when the\nsource completes.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> count&#x3C;T>(predicate?: (value: T, index: number, source: Observable&#x3C;T>) => boolean): OperatorFunction&#x3C;T, number></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>predicate</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>undefined</code>.</p>\n<p>        A\nboolean function to select what values are to be counted. It is provided with\narguments of:</p>\n<ul>\n<li><code>value</code>: the value from the source Observable.</li>\n<li><code>index</code>: the (zero-based) \"index\" of the value from the source Observable.</li>\n<li><code>source</code>: the source Observable instance itself.</li>\n</ul>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>OperatorFunction&#x3C;T, number></code>: An Observable of one number that represents the count as\ndescribed above.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Tells how many values were emitted, when the source\ncompletes.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/count.png\" width=\"100%\" alt=\"count marble diagram\"></p>\n<p><code>count</code> transforms an Observable that emits values into an Observable that\nemits a single value that represents the number of values emitted by the\nsource Observable. If the source Observable terminates with an error, <code>count</code>\nwill pass this error notification along without emitting a value first. If\nthe source Observable does not terminate at all, <code>count</code> will neither emit\na value nor terminate. This operator takes an optional <code>predicate</code> function\nas argument, in which case the output emission will represent the number of\nsource values that matched <code>true</code> with the <code>predicate</code>.</p>\n<h2>Examples</h2>\n<p>Counts how many seconds have passed before the first click happened</p>\n<code-example language=\"ts\">\nimport { fromEvent, interval } from 'rxjs';\nimport { count, takeUntil } from 'rxjs/operators';\n\nconst seconds = interval(1000);\nconst clicks = fromEvent(document, 'click');\nconst secondsBeforeClick = seconds.pipe(takeUntil(clicks));\nconst result = secondsBeforeClick.pipe(count());\nresult.subscribe(x => console.log(x));\n</code-example>\n<p>Counts how many odd numbers are there between 1 and 7</p>\n<code-example language=\"ts\">\nimport { range } from 'rxjs';\nimport { count } from 'rxjs/operators';\n\nconst numbers = range(1, 7);\nconst result = numbers.pipe(count(i => i % 2 === 1));\nresult.subscribe(x => console.log(x));\n// Results in:\n// 4\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/operators/max\"><code>max</code></a>\n</li>\n    <li><a href=\"api/operators/min\"><code>min</code></a>\n</li>\n    <li><a href=\"api/operators/reduce\"><code>reduce</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/isEmpty\n - api/operators/reduce\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - api/operators/max\n - api/operators/min\n - api/operators/reduce\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/count.ts?message=docs(operators)%3A%20describe%20your%20change...#L5-L67\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/count.ts#L5-L67\n-->"
}