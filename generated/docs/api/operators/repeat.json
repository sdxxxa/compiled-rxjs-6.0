{
  "id": "api/operators/repeat",
  "title": "repeat",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/repeat.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L73\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/repeat.ts#L6-L73\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/repeat\", \"name\": \"repeat\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>repeat</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> repeat&#x3C;T>(count: number = -1): MonoTypeOperatorFunction&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>count</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>-1</code>.</p>\n<p>        The number of times the source Observable items are repeated, a count of 0 will yield\nan empty Observable.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>MonoTypeOperatorFunction&#x3C;T></code>: An Observable that will resubscribe to the source stream when the source stream completes\n, at most count times.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Repeats all values emitted on the source. It's like <a href=\"api/operators/retry\"><code>retry</code></a>, but for non error cases.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/repeat.png\" width=\"100%\" alt=\"repeat marble diagram\"></p>\n<p>Similar to <a href=\"api/operators/retry\"><code>retry</code></a>, this operator repeats the stream of items emitted by the source for non error cases.\nRepeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.</p>\n<p>Note: <code>repeat(0)</code> returns an empty observable and <code>repeat()</code> will repeat forever</p>\n<h2>Example</h2>\n<p>Repeat a message stream</p>\n<code-example language=\"ts\">\nimport { of } from 'rxjs';\nimport { repeat, delay } from 'rxjs/operators';\n\nconst source = of('Repeat message');\nconst example = source.pipe(repeat(3));\nexample.subscribe(x => console.log(x));\n\n// Results\n// Repeat message\n// Repeat message\n// Repeat message\n</code-example>\n<p>Repeat 3 values, 2 times</p>\n<code-example language=\"ts\">\nimport { interval } from 'rxjs';\nimport { repeat, take } from 'rxjs/operators';\n\nconst source = interval(1000);\nconst example = source.pipe(take(3), repeat(2));\nexample.subscribe(x => console.log(x));\n\n// Results every second\n// 0\n// 1\n// 2\n// 0\n// 1\n// 2\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/operators/repeatWhen\"><code>repeatWhen</code></a>\n</li>\n    <li><a href=\"api/operators/retry\"><code>retry</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index/function/concat\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - api/operators/repeatWhen\n - api/operators/retry\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/repeat.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L73\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/repeat.ts#L6-L73\n-->"
}