{
  "id": "api/operators/timeoutWith",
  "title": "timeoutWith",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/timeoutWith.ts?message=docs(operators)%3A%20describe%20your%20change...#L12-L75\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/timeoutWith.ts#L12-L75\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/timeoutWith\", \"name\": \"timeoutWith\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>timeoutWith</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Errors if Observable does not emit a value in given time span, in case of which\nsubscribes to the second Observable.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> timeoutWith&#x3C;T, R>(due: number | Date, withObservable: ObservableInput&#x3C;R>, scheduler: SchedulerLike = async): OperatorFunction&#x3C;T, T | R></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>due</td>\n      \n      <td class=\"param-description\">\n              <p>Number specifying period within which Observable must emit values\n        or Date specifying before when Observable should complete</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>withObservable</td>\n      \n      <td class=\"param-description\">\n              <p>Observable which will be subscribed if source fails timeout check.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>async</code>.</p>\n        <p>Scheduler controlling when timeout checks occur.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n                         <p><code>OperatorFunction&#x3C;T, T | R></code>: Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n                         passed as a second parameter.</p>\n                         \n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">It's a version of <code>timeout</code> operator that let's you specify fallback Observable.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/timeoutWith.png\" width=\"100%\" alt=\"timeoutWith marble diagram\"></p>\n<p><code>timeoutWith</code> is a variation of <code>timeout</code> operator. It behaves exactly the same,\nstill accepting as a first argument either a number or a Date, which control - respectively -\nwhen values of source Observable should be emitted or when it should complete.</p>\n<p>The only difference is that it accepts a second, required parameter. This parameter\nshould be an Observable which will be subscribed when source Observable fails any timeout check.\nSo whenever regular <code>timeout</code> would emit an error, <code>timeoutWith</code> will instead start re-emitting\nvalues from second Observable. Note that this fallback Observable is not checked for timeouts\nitself, so it can emit values and complete at arbitrary points in time. From the moment of a second\nsubscription, Observable returned from <code>timeoutWith</code> simply mirrors fallback stream. When that\nstream completes, it completes as well.</p>\n<p>Scheduler, which in case of <code>timeout</code> is provided as as second argument, can be still provided\nhere - as a third, optional parameter. It still is used to schedule timeout checks and -\nas a consequence - when second Observable will be subscribed, since subscription happens\nimmediately after failing check.</p>\n<h2>Example</h2>\n<p>Add fallback observable</p>\n<code-example language=\"ts\">\nimport { intrerval } from 'rxjs';\nimport { timeoutWith } from 'rxjs/operators';\n\nconst seconds = interval(1000);\nconst minutes = interval(60 * 1000);\n\nseconds.pipe(timeoutWith(900, minutes))\n  .subscribe(\n    value => console.log(value), // After 900ms, will start emitting `minutes`,\n                                 // since first value of `seconds` will not arrive fast enough.\n    err => console.log(err),     // Would be called after 900ms in case of `timeout`,\n                                 // but here will never be called.\n  );\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n - api/operators/timeout\n-->\n<!-- links from this doc:\n - /api\n - api/operators\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/timeoutWith.ts?message=docs(operators)%3A%20describe%20your%20change...#L12-L75\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/timeoutWith.ts#L12-L75\n-->"
}