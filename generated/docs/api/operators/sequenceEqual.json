{
  "id": "api/operators/sequenceEqual",
  "title": "sequenceEqual",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/sequenceEqual.ts?message=docs(operators)%3A%20describe%20your%20change...#L7-L68\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/sequenceEqual.ts#L7-L68\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/sequenceEqual\", \"name\": \"sequenceEqual\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>sequenceEqual</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Compares all values of two observables in sequence using an optional comparator function\nand returns an observable of a single boolean value representing whether or not the two sequences\nare equal.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> sequenceEqual&#x3C;T>(compareTo: Observable&#x3C;T>, comparator?: (a: T, b: T) => boolean): OperatorFunction&#x3C;T, boolean></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>compareTo</td>\n      \n      <td class=\"param-description\">\n              <p>The observable sequence to compare the source sequence to.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>comparator</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>An optional function to compare each value pair</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>OperatorFunction&#x3C;T, boolean></code>: An Observable of a single boolean value representing whether or not\nthe values emitted by both observables were equal in sequence.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span></p>\n<p><img src=\"/assets/images/marble-diagrams/sequenceEqual.png\" width=\"100%\" alt=\"sequenceEqual marble diagram\"></p>\n<p><code>sequenceEqual</code> subscribes to two observables and buffers incoming values from each observable. Whenever either\nobservable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\nup; If any value pair doesn't match, the returned observable will emit <code>false</code> and complete. If one of the\nobservables completes, the operator will wait for the other observable to complete; If the other\nobservable emits before completing, the returned observable will emit <code>false</code> and complete. If one observable never\ncompletes or emits after the other complets, the returned observable will never complete.</p>\n<h2>Example</h2>\n<p>figure out if the Konami code matches</p>\n<code-example language=\"ts\">\nimport { from, fromEvent } from 'rxjs';\nimport { sequenceEqual, bufferCount, mergeMap, map } from 'rxjs/operators';\n\nconst codes = from([\n  'ArrowUp',\n  'ArrowUp',\n  'ArrowDown',\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowLeft',\n  'ArrowRight',\n  'KeyB',\n  'KeyA',\n  'Enter', // no start key, clearly.\n]);\n\nconst keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\nconst matches = keys.pipe(\n  bufferCount(11, 1),\n  mergeMap(\n    last11 => from(last11).pipe(sequenceEqual(codes)),\n  ),\n);\nmatches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/combineLatest\"><code>combineLatest</code></a>\n</li>\n    <li><a href=\"api/index/function/zip\"><code>zip</code></a>\n</li>\n    <li><a href=\"api/operators/withLatestFrom\"><code>withLatestFrom</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/function/combineLatest\n - api/index/function/zip\n - api/operators\n - api/operators/withLatestFrom\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/sequenceEqual.ts?message=docs(operators)%3A%20describe%20your%20change...#L7-L68\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/sequenceEqual.ts#L7-L68\n-->"
}