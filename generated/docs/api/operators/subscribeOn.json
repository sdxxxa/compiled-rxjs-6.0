{
  "id": "api/operators/subscribeOn",
  "title": "subscribeOn",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/operators/subscribeOn.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L53\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/subscribeOn.ts#L6-L53\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/operators\", \"name\": \"rxjs/operators\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/operators/subscribeOn\", \"name\": \"subscribeOn\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/operators\">rxjs/operators</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>subscribeOn</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Asynchronously subscribes Observers to this Observable on the specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> subscribeOn&#x3C;T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to perform subscription actions on.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>delay</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>0</code>.</p>\n        <p>Type: <code>number</code>.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n <p><code>MonoTypeOperatorFunction&#x3C;T></code>: The source Observable modified so that its subscriptions happen on the specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.\n .</p>\n \n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p>With <code>subscribeOn</code> you can decide what type of scheduler a specific Observable will be using when it is subscribed to.</p>\n<p>Schedulers control the speed and order of emissions to observers from an Observable stream.</p>\n<p><img src=\"/assets/images/marble-diagrams/subscribeOn.png\" width=\"100%\" alt=\"subscribeOn marble diagram\"></p>\n<h2>Example</h2>\n<p>Given the following code:</p>\n<code-example language=\"javascript\">\nimport { of, merge } from 'rxjs';\n\nconst a = of(1, 2, 3, 4);\nconst b = of(5, 6, 7, 8, 9);\nmerge(a, b).subscribe(console.log);\n</code-example>\n<p>Both Observable <code>a</code> and <code>b</code> will emit their values directly and synchronously once they are subscribed to.\nThis will result in the output of <code>1 2 3 4 5 6 7 8 9</code>.</p>\n<p>But if we instead us the <code>subscribeOn</code> operator declaring that we want to use the <a href=\"api/index/const/asyncScheduler\"><code>async</code></a> for values emited by Observable <code>a</code>:</p>\n<code-example language=\"javascript\">\nimport { of, merge, asyncScheduler } from 'rxjs';\nimport { subscribeOn } from 'rxjs/operators';\n\nconst a = of(1, 2, 3, 4).pipe(subscribeOn(asyncScheduler));\nconst b = of(5, 6, 7, 8, 9);\nmerge(a, b).subscribe(console.log);\n</code-example>\n<p>The output will instead be <code>5 6 7 8 9 1 2 3 4</code>.\nThe reason for this is that Observable <code>b</code> emits its values directly and synchronously like before\nbut the emissions from <code>a</code> are scheduled on the event loop because we are now using the <a href=\"api/index/const/asyncScheduler\"><code>async</code></a> for that specific Observable.</p>\n\n</section>\n\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/operators\n-->\n<!-- links from this doc:\n - /api\n - api/index/const/asyncScheduler\n - api/index/interface/SchedulerLike\n - api/operators\n - https://github.com/reactivex/rxjs/edit/master/src/internal/operators/subscribeOn.ts?message=docs(operators)%3A%20describe%20your%20change...#L6-L53\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/operators/subscribeOn.ts#L6-L53\n-->"
}