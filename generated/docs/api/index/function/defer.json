{
  "id": "api/index/function/defer",
  "title": "defer",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/defer.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L67\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/defer.ts#L5-L67\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/defer\", \"name\": \"defer\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>defer</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Creates an Observable that, on subscribe, calls an Observable factory to\nmake an Observable for each new Observer.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> defer&#x3C;O extends ObservableInput&#x3C;any>>(observableFactory: () => O | void): Observable&#x3C;ObservedValueOf&#x3C;O>></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>observableFactory</td>\n      \n      <td class=\"param-description\">\n      <p>        The Observable\nfactory function to invoke for each Observer that subscribes to the output\nObservable. May also return a Promise, which will be converted on the fly\nto an Observable.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;ObservedValueOf&#x3C;O>></code>: An Observable whose Observers' subscriptions trigger\nan invocation of the given Observable factory function.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Creates the Observable lazily, that is, only when it\nis subscribed.\n</span></p>\n<p><img src=\"/assets/images/marble-diagrams/defer.png\" width=\"100%\" alt=\"defer marble diagram\"></p>\n<p><code>defer</code> allows you to create the Observable only when the Observer\nsubscribes, and create a fresh Observable for each Observer. It waits until\nan Observer subscribes to it, and then it generates an Observable,\ntypically with an Observable factory function. It does this afresh for each\nsubscriber, so although each subscriber may think it is subscribing to the\nsame Observable, in fact each subscriber gets its own individual\nObservable.</p>\n<h2>Example</h2>\n<h3>Subscribe to either an Observable of clicks or an Observable of interval, at random</h3>\n<code-example language=\"ts\">\nimport { defer, fromEvent, interval } from 'rxjs';\n\nconst clicksOrInterval = defer(function () {\n  return Math.random() > 0.5\n    ? fromEvent(document, 'click')\n    : interval(1000);\n});\nclicksOrInterval.subscribe(x => console.log(x));\n\n// Results in the following behavior:\n// If the result of Math.random() is greater than 0.5 it will listen\n// for clicks anywhere on the \"document\"; when document is clicked it\n// will log a MouseEvent object to the console. If the result is less\n// than 0.5 it will emit ascending numbers, one every second(1000ms).\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/index/class/Observable\"><code>Observable</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/iif\n - api/index/function/using\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/defer.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L67\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/defer.ts#L5-L67\n-->"
}