{
  "id": "api/index/function/generate",
  "title": "generate",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/generate.ts?message=docs(index)%3A%20describe%20your%20change...#L258-L331\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/generate.ts#L258-L331\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/generate\", \"name\": \"generate\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>generate</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> generate&#x3C;T, S>(initialStateOrOptions: S | GenerateOptions&#x3C;T, S>, condition?: ConditionFunc&#x3C;S>, iterate?: IterateFunc&#x3C;S>, resultSelectorOrObservable?: (ResultFunc&#x3C;S, T>) | SchedulerLike, scheduler?: SchedulerLike): Observable&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>initialStateOrOptions</td>\n      \n      <td class=\"param-description\">\n              <p>Type: <code>S | GenerateOptions<t, s=\"\"></t,></code>.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>condition</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>Type: <code>ConditionFunc<s></s></code><s>.</s></p><s>\n        \n      </s></td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>iterate</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>Type: <code>IterateFunc<s></s></code><s>.</s></p><s>\n        \n      </s></td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>resultSelectorOrObservable</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>Type: <code>(ResultFunc<s, t=\"\">) | SchedulerLike</s,></code>.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>Type: <code>SchedulerLike</code>.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;T></code></p>\n\n\n\n\n\n\n\n\n\n  \n\n\n<section class=\"overloads\">\n  <h2>Overloads</h2>\n  \nconst generated = generate(0, x => x &#x3C; 3, x => x + 1);<p></p><p>generated.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('Yo!')\n);</p><p>// Logs:\n// 0\n// 1\n// 2\n// \"Yo!\"</p><p>@example </p>\nconst generated = generate(0, x => x &#x3C; 3, x => x + 1, x => x * 1000);<p></p><p>generated.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('Yo!')\n);</p><p>// Logs:\n// 0\n// 1000\n// 2000\n// \"Yo!\"</p><p>@example </p>\nconst generated = generate({\ninitialState: 0,\ncondition(value) { return value &#x3C; 3; },\niterate(value) { return value + 1; },\nresultSelector(value) { return value * 1000; }\n});<p></p><p>generated.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('Yo!')\n);</p><p>// Logs:\n// 0\n// 1000\n// 2000\n// \"Yo!\"</p><p>@example </p>\nconst generated = generate({\ninitialState: 0,\niterate(value) { return value + 1; },\nresultSelector(value) { return value * 1000; }\n});<p></p><p>generated.subscribe(\nvalue => console.log(value),\nerr => {},\n() => console.log('Yo!') // This will never run.\n);</p><p>// Logs:\n// 0\n// 1000\n// 2000\n// 3000\n// ...and never stops.</p><p>@see <a href=\"api/index/function/from\"><code>from</code></a>\n@see <a href=\"api/index/class/Observable#create\"><code>create</code></a></p><p>@param {S} initialState Initial state.\n@param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n@param {function (state: S): S} iterate Iteration step function.\n@param {function (state: S): T} [resultSelector] Selector function for results produced in the sequence.\n@param {Scheduler} [scheduler] A <a href=\"api/index/class/Scheduler\"><code>Scheduler</code></a> on which to run the generator loop. If not provided, defaults to emitting immediately.\n@return {Observable<t>} The generated sequence.</t></p><table>\n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> generate(initialState: S, condition: ConditionFunc&#x3C;S>, iterate: IterateFunc&#x3C;S>, resultSelector: ResultFunc&#x3C;S, T>, scheduler?: SchedulerLike): Observable&#x3C;T></code-example>\n\n\n<div class=\"short-description\">\n  <p>Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.</p>\n\n</div>\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>initialState</td>\n      \n      <td class=\"param-description\">\n              <p>Initial state.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>condition</td>\n      \n      <td class=\"param-description\">\n              <p>Condition to terminate generation (upon returning false).</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>iterate</td>\n      \n      <td class=\"param-description\">\n              <p>Iteration step function.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>resultSelector</td>\n      \n      <td class=\"param-description\">\n              <p>Selector function for results produced in the sequence. (deprecated)</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>A <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> on which to run the generator loop. If not provided, defaults to emit immediately.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;T></code>: The generated sequence.</p>\n\n\n\n\n\n\n<div class=\"description\">\n  <p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n\n</div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> generate(initialState: S, condition: ConditionFunc&#x3C;S>, iterate: IterateFunc&#x3C;S>, scheduler?: SchedulerLike): Observable&#x3C;S></code-example>\n\n\n<div class=\"short-description\">\n  <p>Generates an Observable by running a state-driven loop\nthat emits an element on each iteration.</p>\n\n</div>\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>initialState</td>\n      \n      <td class=\"param-description\">\n              <p>Type: <code>S</code>.</p>\n        \n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>condition</td>\n      \n      <td class=\"param-description\">\n              <p>Type: <code>ConditionFunc<s></s></code><s>.</s></p><s>\n        \n      </s></td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>iterate</td>\n      \n      <td class=\"param-description\">\n              <p>Type: <code>IterateFunc<s></s></code><s>.</s></p><s>\n        \n      </s></td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n              <p>Optional. Default is <code>undefined</code>.</p>\n        <p>Type: <code>SchedulerLike</code>.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;S></code></p>\n\n\n\n\n\n\n<div class=\"description\">\n  <p><span class=\"informal\">Use it instead of nexting values in a for loop.</span></p>\n<img src=\"./img/generate.png\" width=\"100%\">\n<p><code>generate</code> allows you to create stream of values generated with a loop very similar to\ntraditional for loop. First argument of <code>generate</code> is a beginning value. Second argument\nis a function that accepts this value and tests if some condition still holds. If it does,\nloop continues, if not, it stops. Third value is a function which takes previously defined\nvalue and modifies it in some way on each iteration. Note how these three parameters\nare direct equivalents of three expressions in regular for loop: first expression\ninitializes some state (for example numeric index), second tests if loop can make next\niteration (for example if index is lower than 10) and third states how defined value\nwill be modified on every step (index will be incremented by one).</p>\n<p>Return value of a <code>generate</code> operator is an Observable that on each loop iteration\nemits a value. First, condition function is ran. If it returned true, Observable\nemits currently stored value (initial value at the first iteration) and then updates\nthat value with iterate function. If at some point condition returned false, Observable\ncompletes at that moment.</p>\n<p>Optionally you can pass fourth parameter to <code>generate</code> - a result selector function which allows you\nto immediately map value that would normally be emitted by an Observable.</p>\n<p>If you find three anonymous functions in <code>generate</code> call hard to read, you can provide\nsingle object to the operator instead. That object has properties: <code>initialState</code>,\n<code>condition</code>, <code>iterate</code> and <code>resultSelector</code>, which should have respective values that you\nwould normally pass to <code>generate</code>. <code>resultSelector</code> is still optional, but that form\nof calling <code>generate</code> allows you to omit <code>condition</code> as well. If you omit it, that means\ncondition always holds, so output Observable will never complete.</p>\n<p>Both forms of <code>generate</code> can optionally accept a scheduler. In case of multi-parameter call,\nscheduler simply comes as a last argument (no matter if there is resultSelector\nfunction or not). In case of single-parameter call, you can provide it as a\n<code>scheduler</code> property on object passed to the operator. In both cases scheduler decides when\nnext iteration of the loop will happen and therefore when next value will be emitted\nby the Observable. For example to ensure that each value is pushed to the observer\non separate task in event loop, you could use <code>async</code> scheduler. Note that\nby default (when no scheduler is passed) values are simply emitted synchronously.</p>\n<p>@example </p></div></td></tr></tbody><caption>Use with condition and iterate functions.</caption>\n\n\n<caption>Use with condition, iterate and resultSelector functions.</caption>\n\n\n<caption>Use with options object.</caption>\n\n\n<caption>Use options object without condition function.</caption>\n\n\n\n\n\n\n    \n  \n  \n  <tbody><tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> generate(options: GenerateBaseOptions&#x3C;S>): Observable&#x3C;S></code-example>\n\n\n<div class=\"short-description\">\n  <p>Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\nThe overload accepts options object that might contain initial state, iterate,\ncondition and scheduler.</p>\n\n</div>\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>options</td>\n      \n      <td class=\"param-description\">\n              <p>Object that must contain initialState, iterate and might contain condition and scheduler.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;S></code>: The generated sequence.</p>\n\n\n\n\n\n\n<div class=\"description\">\n  <p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n\n</div>\n    </td>\n  </tr>\n  \n  <tr>\n    <td>\n      <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> generate(options: GenerateOptions&#x3C;T, S>): Observable&#x3C;T></code-example>\n\n\n<div class=\"short-description\">\n  <p>Generates an observable sequence by running a state-driven loop\nproducing the sequence's elements, using the specified scheduler\nto send out observer messages.\nThe overload accepts options object that might contain initial state, iterate,\ncondition, result selector and scheduler.</p>\n\n</div>\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>options</td>\n      \n      <td class=\"param-description\">\n              <p>Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.</p>\n        \n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;T></code>: The generated sequence.</p>\n\n\n\n\n\n\n<div class=\"description\">\n  <p><img src=\"/assets/images/marble-diagrams/generate.png\" width=\"100%\" alt=\"generate marble diagram\"></p>\n\n</div>\n    </td>\n  </tr>\n  \n  </tbody></table>\n</section>\n\n\n  \n\n  \n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/class/Observable#create\n - api/index/class/Scheduler\n - api/index/function/from\n - api/index/interface/SchedulerLike\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/generate.ts?message=docs(index)%3A%20describe%20your%20change...#L258-L331\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/generate.ts#L258-L331\n-->"
}