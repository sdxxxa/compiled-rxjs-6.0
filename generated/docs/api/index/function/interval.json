{
  "id": "api/index/function/interval",
  "title": "interval",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/interval.ts?message=docs(index)%3A%20describe%20your%20change...#L6-L71\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/interval.ts#L6-L71\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/interval\", \"name\": \"interval\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>interval</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Creates an Observable that emits sequential numbers every specified\ninterval of time, on a specified <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a>.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> interval(period: 0 = 0, scheduler: SchedulerLike = async): Observable&#x3C;number></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>period</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>0</code>.</p>\n<p>        The interval size in milliseconds (by default)\nor the time unit determined by the scheduler's clock.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>scheduler</td>\n      \n      <td class=\"param-description\">\n      <p>        Optional. Default is <code>async</code>.</p>\n<p>        The <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to use for scheduling\nthe emission of values, and providing a notion of \"time\".</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;number></code>: An Observable that emits a sequential number each time\ninterval.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Emits incremental numbers periodically in time.\n</span></p>\n<p><img src=\"/assets/images/marble-diagrams/interval.png\" width=\"100%\" alt=\"interval marble diagram\"></p>\n<p><code>interval</code> returns an Observable that emits an infinite sequence of\nascending integers, with a constant interval of time of your choosing\nbetween those emissions. The first emission is not sent immediately, but\nonly after the first period has passed. By default, this operator uses the\n<code>async</code> <a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to provide a notion of time, but you may pass any\n<a href=\"api/index/interface/SchedulerLike\"><code>SchedulerLike</code></a> to it.</p>\n<h2>Example</h2>\n<p>Emits ascending numbers, one every second (1000ms) up to the number 3</p>\n<code-example language=\"ts\">\nimport { interval } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst numbers = interval(1000);\n\nconst takeFourNumbers = numbers.pipe(take(4));\n\ntakeFourNumbers.subscribe(x => console.log('Next: ', x));\n\n// Logs:\n// Next: 0\n// Next: 1\n// Next: 2\n// Next: 3\n</code-example>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/timer\"><code>timer</code></a>\n</li>\n    <li><a href=\"api/operators/delay\"><code>delay</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n - api/index/function/range\n - api/index/function/timer\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/timer\n - api/index/interface/SchedulerLike\n - api/operators/delay\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/interval.ts?message=docs(index)%3A%20describe%20your%20change...#L6-L71\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/interval.ts#L6-L71\n-->"
}