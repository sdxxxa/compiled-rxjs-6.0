{
  "id": "api/index/function/using",
  "title": "using",
  "contents": "\n\n<article>\n  <div class=\"page-actions\">\n    <a href=\"https://github.com/reactivex/rxjs/edit/master/src/internal/observable/using.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L63\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n    <a href=\"https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/using.ts#L5-L63\" aria-label=\"View Source\" title=\"View Source\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n  </div>\n  <div class=\"breadcrumb\">\n    <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [\n          { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.io//api\", \"name\": \"API\" } },\n          { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.io/api/index\", \"name\": \"rxjs/index\" } },\n          { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.io/api/index/function/using\", \"name\": \"using\" } }\n        ]\n      }\n    </script>\n      <a href=\"/api\">API</a> / <a href=\"api/index\">rxjs/index</a>\n  </div>\n  <header class=\"api-header\">\n    <h1>using</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    \n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <p class=\"short-description\"></p><p>Creates an Observable that uses a resource which will be disposed at the same time as the Observable.</p>\n<p></p>\n  \n  \n  \n\n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\"> using&#x3C;T>(resourceFactory: () => Unsubscribable | void, observableFactory: (resource: Unsubscribable | void) => ObservableInput&#x3C;T> | void): Observable&#x3C;T></code-example>\n\n\n\n<h4 class=\"no-anchor\">Parameters</h4>\n<table class=\"is-full-width list-table parameters-table function-overload-parameters\">\n  <tbody>\n  \n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>resourceFactory</td>\n      \n      <td class=\"param-description\">\n      <p>        A function which creates any resource object\nthat implements <code>unsubscribe</code> method.</p>\n\n      </td>\n    </tr>\n    <tr class=\"function-overload-parameter\">\n      <td class=\"param-name\"><a id=\"\"></a>observableFactory</td>\n      \n      <td class=\"param-description\">\n      <p>        A function which\ncreates an Observable, that can use injected resource object.</p>\n\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n\n<h4 class=\"no-anchor\">Returns</h4>\n<p><code>Observable&#x3C;T></code>: An Observable that behaves the same as Observable returned by <code>observableFactory</code>, but\nwhich - when completed, errored or unsubscribed - will also call <code>unsubscribe</code> on created resource object.</p>\n\n\n\n\n\n\n\n\n\n  \n\n<section class=\"description\">\n  <h2>Description</h2>\n  <p><span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span></p>\n<p><code>using</code> is a factory operator, which accepts two functions. First function returns a disposable resource.\nIt can be an arbitrary object that implements <code>unsubscribe</code> method. Second function will be injected with\nthat object and should return an Observable. That Observable can use resource object during its execution.\nBoth functions passed to <code>using</code> will be called every time someone subscribes - neither an Observable nor\nresource object will be shared in any way between subscriptions.</p>\n<p>When Observable returned by <code>using</code> is subscribed, Observable returned from the second function will be subscribed\nas well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\nObservable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\nthe <code>unsubscribe</code> method on resource object will be called. This can be used to do any necessary clean up, which\notherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\ncancels subscription to an Observable via <code>unsubscribe</code>, so <code>using</code> can be used as a hook, allowing you to make\nsure that all resources which need to exist during an Observable execution will be disposed at appropriate time.</p>\n\n</section>\n\n\n\n  \n\n  \n<section class=\"see-also\">\n  <h2>See Also</h2>\n  <ul>\n  \n    <li><a href=\"api/index/function/defer\"><code>defer</code></a>\n</li>\n  </ul>\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/index\n-->\n<!-- links from this doc:\n - /api\n - api/index\n - api/index/function/defer\n - https://github.com/reactivex/rxjs/edit/master/src/internal/observable/using.ts?message=docs(index)%3A%20describe%20your%20change...#L5-L63\n - https://github.com/reactivex/rxjs/tree/6.4.0/src/internal/observable/using.ts#L5-L63\n-->"
}